{"name": "test_create_stock_transfer", "status": "broken", "statusDetails": {"message": "selenium.common.exceptions.TimeoutException: Message:", "trace": "self = <test.test_stock.TestStockTransfer object at 0x000001A539C4E9C0>\n\n    def test_create_stock_transfer(self):\n            gb=StockTransferPage(self.driver)\n    \n            global_funcations1.click_button(self.driver, \"//span[normalize-space()='New']\")\n            time.sleep(10)\n            # time.sleep(2)\n    \n            # click new icon\n            # gb.select_source_location(self.driver,\"lahore\")\n>           global_funcations1.click_button(self.driver, \"//span[normalize-space()='New']\")\n\ntest\\test_stock.py:61: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\nglobal_funcations1.py:11: in click_button\n    button=WebDriverWait(driver, 10).until(EC.visibility_of_element_located((By.XPATH, xpath)))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nself = <selenium.webdriver.support.wait.WebDriverWait (session=\"89bdaf70-785b-4767-8608-6570b5f7d4b9\")>\nmethod = <function visibility_of_element_located.<locals>._predicate at 0x000001A539C65F80>, message = ''\n\n    def until(self, method: Callable[[D], Union[Literal[False], T]], message: str = \"\") -> T:\n        \"\"\"Calls the method provided with the driver as an argument until the \\\n        return value does not evaluate to ``False``.\n    \n        :param method: callable(WebDriver)\n        :param message: optional message for :exc:`TimeoutException`\n        :returns: the result of the last call to `method`\n        :raises: :exc:`selenium.common.exceptions.TimeoutException` if timeout occurs\n        \"\"\"\n        screen = None\n        stacktrace = None\n    \n        end_time = time.monotonic() + self._timeout\n        while True:\n            try:\n                value = method(self._driver)\n                if value:\n                    return value\n            except self._ignored_exceptions as exc:\n                screen = getattr(exc, \"screen\", None)\n                stacktrace = getattr(exc, \"stacktrace\", None)\n            time.sleep(self._poll)\n            if time.monotonic() > end_time:\n                break\n>       raise TimeoutException(message, screen, stacktrace)\nE       selenium.common.exceptions.TimeoutException: Message:\n\n.venv\\Lib\\site-packages\\selenium\\webdriver\\support\\wait.py:105: TimeoutException"}, "start": 1731326029407, "stop": 1731326050739, "uuid": "7c140529-f11e-49c7-a2c0-832308c6dcd9", "historyId": "96a3dde91ea46166cf20b8e6353d6c73", "testCaseId": "96a3dde91ea46166cf20b8e6353d6c73", "fullName": "test.test_stock.TestStockTransfer#test_create_stock_transfer", "labels": [{"name": "tag", "value": "@pytest.mark.usefixtures('setup')"}, {"name": "parentSuite", "value": "test"}, {"name": "suite", "value": "test_stock"}, {"name": "subSuite", "value": "TestStockTransfer"}, {"name": "host", "value": "DESKTOP-VHI7V6P"}, {"name": "thread", "value": "2680-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "test.test_stock"}]}